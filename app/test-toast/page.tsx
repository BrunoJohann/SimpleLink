'use client'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { useToast } from '@/hooks/use-toast'
import { AlertCircle, CheckCircle, Info, Trash2 } from 'lucide-react'

export default function TestToastPage() {
  const { toast } = useToast()

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="container mx-auto px-4 max-w-4xl">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">
            üîî Sistema de Notifica√ß√µes Toast
          </h1>
          <p className="text-gray-600 mt-2">
            Teste os diferentes tipos de notifica√ß√µes popup
          </p>
        </div>

        <div className="grid gap-6 md:grid-cols-2">
          {/* Success Toasts */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center text-green-600">
                <CheckCircle className="w-5 h-5 mr-2" />
                Sucesso
              </CardTitle>
              <CardDescription>
                Notifica√ß√µes de opera√ß√µes bem-sucedidas
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button
                onClick={() =>
                  toast({
                    variant: 'success',
                    title: '‚úÖ Salvo com Sucesso!',
                    description: 'Suas configura√ß√µes foram atualizadas.',
                  })
                }
                className="w-full bg-green-600 hover:bg-green-700"
              >
                Configura√ß√µes Salvas
              </Button>

              <Button
                onClick={() =>
                  toast({
                    variant: 'success',
                    title: '‚úÖ Upload Conclu√≠do!',
                    description: 'Imagem otimizada e salva com sucesso.',
                  })
                }
                className="w-full bg-green-600 hover:bg-green-700"
              >
                Upload de Imagem
              </Button>

              <Button
                onClick={() =>
                  toast({
                    variant: 'success',
                    title: '‚úÖ Produto Criado!',
                    description: 'Seu produto foi adicionado √† loja.',
                  })
                }
                className="w-full bg-green-600 hover:bg-green-700"
              >
                Produto Adicionado
              </Button>
            </CardContent>
          </Card>

          {/* Error Toasts */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center text-red-600">
                <AlertCircle className="w-5 h-5 mr-2" />
                Erro
              </CardTitle>
              <CardDescription>
                Notifica√ß√µes de erros e falhas
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button
                onClick={() =>
                  toast({
                    variant: 'destructive',
                    title: '‚ùå Erro ao Salvar',
                    description: 'N√£o foi poss√≠vel salvar as altera√ß√µes.',
                  })
                }
                variant="destructive"
                className="w-full"
              >
                Erro de Salvamento
              </Button>

              <Button
                onClick={() =>
                  toast({
                    variant: 'destructive',
                    title: '‚ùå Upload Falhou',
                    description: 'Arquivo muito grande. M√°ximo: 5MB.',
                  })
                }
                variant="destructive"
                className="w-full"
              >
                Erro de Upload
              </Button>

              <Button
                onClick={() =>
                  toast({
                    variant: 'destructive',
                    title: '‚ùå Conex√£o Perdida',
                    description: 'Verifique sua conex√£o com a internet.',
                  })
                }
                variant="destructive"
                className="w-full"
              >
                Erro de Conex√£o
              </Button>
            </CardContent>
          </Card>

          {/* Info Toasts */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center text-blue-600">
                <Info className="w-5 h-5 mr-2" />
                Informa√ß√£o
              </CardTitle>
              <CardDescription>
                Notifica√ß√µes informativas gerais
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button
                onClick={() =>
                  toast({
                    title: '‚ÑπÔ∏è Sincronizando...',
                    description: 'Suas altera√ß√µes est√£o sendo sincronizadas.',
                  })
                }
                variant="outline"
                className="w-full"
              >
                Sincroniza√ß√£o
              </Button>

              <Button
                onClick={() =>
                  toast({
                    title: 'üìß Email Enviado',
                    description: 'Verifique sua caixa de entrada.',
                  })
                }
                variant="outline"
                className="w-full"
              >
                Email Enviado
              </Button>

              <Button
                onClick={() =>
                  toast({
                    title: 'üîÑ Atualizando...',
                    description: 'Carregando novos dados.',
                  })
                }
                variant="outline"
                className="w-full"
              >
                Atualizando Dados
              </Button>
            </CardContent>
          </Card>

          {/* Action Toasts */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center text-orange-600">
                <Trash2 className="w-5 h-5 mr-2" />
                Com A√ß√£o
              </CardTitle>
              <CardDescription>
                Notifica√ß√µes com bot√µes de a√ß√£o
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button
                onClick={() =>
                  toast({
                    title: 'üóëÔ∏è Produto Deletado',
                    description: 'O produto foi removido da loja.',
                    action: (
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() =>
                          toast({
                            variant: 'success',
                            title: '‚Ü©Ô∏è Desfeito!',
                            description: 'Produto restaurado.',
                          })
                        }
                      >
                        Desfazer
                      </Button>
                    ),
                  })
                }
                variant="outline"
                className="w-full"
              >
                Deletar com Desfazer
              </Button>

              <Button
                onClick={() => {
                  // Simular m√∫ltiplos toasts
                  toast({
                    variant: 'success',
                    title: '‚úÖ Item 1 Processado',
                  })
                  setTimeout(() => {
                    toast({
                      variant: 'success',
                      title: '‚úÖ Item 2 Processado',
                    })
                  }, 500)
                  setTimeout(() => {
                    toast({
                      variant: 'success',
                      title: '‚úÖ Todos Conclu√≠dos!',
                    })
                  }, 1000)
                }}
                variant="outline"
                className="w-full"
              >
                M√∫ltiplos Toasts
              </Button>

              <Button
                onClick={() =>
                  toast({
                    title: '‚è≥ Processando...',
                    description: 'Isso pode levar alguns segundos.',
                    duration: 10000, // 10 segundos
                  })
                }
                variant="outline"
                className="w-full"
              >
                Toast Longo (10s)
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Info Box */}
        <Card className="mt-6 border-blue-200 bg-blue-50">
          <CardContent className="pt-6">
            <div className="flex items-start space-x-3">
              <Info className="w-5 h-5 text-blue-600 mt-0.5" />
              <div className="flex-1">
                <h3 className="font-semibold text-blue-900 mb-2">
                  Como Funciona
                </h3>
                <ul className="text-sm text-blue-800 space-y-1">
                  <li>‚Ä¢ Os toasts aparecem no canto superior direito (desktop)</li>
                  <li>‚Ä¢ No mobile, aparecem no topo da tela</li>
                  <li>‚Ä¢ Desaparecem automaticamente ap√≥s alguns segundos</li>
                  <li>‚Ä¢ Podem ser fechados clicando no X</li>
                  <li>‚Ä¢ M√∫ltiplos toasts podem aparecer ao mesmo tempo</li>
                  <li>‚Ä¢ Totalmente acess√≠veis via teclado (pressione Esc para fechar)</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Code Example */}
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>üìù Exemplo de C√≥digo</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
              <code>{`import { useToast } from '@/hooks/use-toast'

export function MyComponent() {
  const { toast } = useToast()

  const handleSave = async () => {
    try {
      await saveData()
      
      toast({
        variant: 'success',
        title: '‚úÖ Sucesso!',
        description: 'Dados salvos com sucesso!',
      })
    } catch (error) {
      toast({
        variant: 'destructive',
        title: '‚ùå Erro',
        description: 'N√£o foi poss√≠vel salvar.',
      })
    }
  }

  return <Button onClick={handleSave}>Salvar</Button>
}`}</code>
            </pre>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

