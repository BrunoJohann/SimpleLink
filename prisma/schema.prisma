// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    stores        Store[]
    createdAt     DateTime  @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Store {
    id                 String    @id @default(cuid())
    ownerId            String
    owner              User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    name               String
    slug               String    @unique
    description        String?
    logo               String?   @db.Text
    theme              Json?
    isSubdomainEnabled Boolean   @default(false)
    products           Product[]
    createdAt          DateTime  @default(now())

    @@unique([ownerId, slug])
}

model Product {
    id          String          @id @default(cuid())
    storeId     String
    store       Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
    title       String
    slug        String
    description String?
    imageUrl    String?
    price       Decimal?        @db.Decimal(10, 2)
    published   Boolean         @default(true)
    links       AffiliateLink[]
    clicks      ClickEvent[]
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    @@unique([storeId, slug])
}

model AffiliateLink {
    id          String  @id @default(cuid())
    productId   String
    product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    marketplace String
    url         String
    note        String?

    @@unique([productId, marketplace])
}

model ClickEvent {
    id           String   @id @default(cuid())
    productId    String
    product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    marketplace  String
    referer      String?
    utm_source   String?
    utm_medium   String?
    utm_campaign String?
    ip           String?
    userAgent    String?
    createdAt    DateTime @default(now())
}
